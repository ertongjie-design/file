浏览器 --> 表现层 --> 业务逻辑层 --> 持久化层 --> DB

控制层：Servlet/Action/Handler

持久化层：JDBC/DBUtils/Spring JDBCTemplate/Hibernate/MyBatis
Hibernate是持久化层的重量级选手，2020不用了
MyBatis用得最多，轻量级
log4j.properties是帮助我们在控制台打印日志的工具

借助于Maven可以将一个项目拆分成多个工程
静态导入后，被导入类中的静态方法就可以直接使用

What：
	Maven是一款服务于Java平台的自动化构建工具
自动化构建工具：Maven
③构建过程中的各个环节
[1]清理：将以前编译得到的旧的class字节码文件删除，为下一次编译做准备
[2]编译：将Java源程序编译成class字节码文件
[3]测试：自动测试，自动调用junit程序
[4]报告：测试程序执行的结果
[5]打包：动态Web工程打war包，Java工程打jar包
[6]安装：Maven特定的概念--将打包得到的文件复制到“仓库”中指定的位置
[7]部署：将动态Web工程生成的war包复制到Servlet容器的指定目录下，使其可以运行

4、安装Maven核心程序


Maven的核心概念：
①约定的目录结构☆
	[1]根目录：工程名
	[2]src目录：源码
	[3]pom.xml文件：Maven工程的核心配置文件
	[4]main目录：存放主程序
	[5]test目录：存放测试程序
	[6]java目录：存放Java源文件
	[7]resources目录：存放框架或其他工具的配置文件
②POM☆
③坐标☆
	在pom.xml文件中，是唯一标识当前项目的
④依赖☆☆
	依赖中依赖的都是jar包，
⑤仓库
⑥生命周期/插件/目标
⑦继承
⑧聚合
7、常用Maven命令
	①注意：执行与构建过程相关的Maven命令，必须进入pom.xml所在的目录。
		与构建过程相关：编译、测试、打包、.......
	②常用命令
		[1]mvn clean：清理
		[2]mvn compile：编译主程序
		[3]mvn test-compile：编译测试程序
		[4]mvn test：执行测试
		[5]mvn package：打包（打包是打在项目的target目录下）
		[6]mnv install：安装
8、关于联网下载问题
	①Maven的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须由特定的插件来完成。而插件本身并不包含在Maven的核心程序中。
	②当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找
	③本地仓库默认位置：你知道不写了
	④Maven核心程序如果在本地仓库中找不到需要的插件，那么会自动连接外网，到中央仓库下载。
	⑤无法连接外网则失败
	⑥修改默认本地仓库位置在maven的config的settings.xml中
9、POM
	pom.xml对于Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置，重要程度相当于web.xml对动态web工程
10、坐标
	Maven坐标是使用下面三个向量在仓库中唯一定位一个Maven工程
	[1]groupId：公司或组织域名倒序+项目名
	[2]artifactId：模块名
	[3]version：版本
	
	Maven工程的坐标与仓库中路径的对应关系
11、仓库
	①仓库分类
	[1]本地仓库：为本机上的Maven工程服务
	[2]远程仓库
		(1)私服：架设在局域网环境下，为局域网中的所有Maven工程服务
		(2)中央仓库：架设在Internet上，为全世界所有Maven工程服务
		(3)中央仓库镜像：架设在各个大洲，为中央仓库分担流量
	②仓库中保存的内容：Maven工程
	[1]Maven自身需要的插件
	[2]第三方框架或工具的jar包
	[3]我们自己开发的Maven工程
12、依赖[低级]
	①Maven解析依赖信息会到本地仓库中查找被依赖的jar包
		对于我们自己开发的Maven工程，使用install命令安装后就可以进入仓库
	②依赖的范围：即依赖中的scope标签中的取值
		[1]compile
		・对主程序是否有效：√
		・对测试程序是否有效：√
		・是否参与打包：√(只有compile和runtime范围依赖会参与打包)
		[2]test
		・对主程序是否有效：×
		・对测试程序是否有效：√
		・是否参与打包：×
		・典型例子：junit
		[3]provided：从开发阶段和compile对比认识
		・对主程序是否有效：√
		・对测试程序是否有效：√
		・是否参与打包：×
		・是否参与部署：×(不参与打包当然也就不参与部署，部署的前提就是打包)
		・典型例子：servlet-api.jar
		provided的依赖一般都是tomcat上有的依赖，由servlet容器提供的依赖

Web工程几个阶段：开发 --> 部署 --> 运行（运行是在Tomcat服务器上）
compile范围的依赖在三个阶段都需要
13、生命周期
	Maven有三套相互独立的生命周期
	Clean Lifecycle
	Default Lifecycle(重要：下面就是生命周期的各个阶段)
		validate
		generate-sources
		process-sources
		generate-resources
		process-resources 复制并处理资源文件，至目标测试目录
		compile  编译项目的源代码(对应插件是maven-compiler-plugin)
		process-classes
		generate-test-sources
		process-test-sources
		generate-test-resources
		process-test-resources 复制并处理资源文件，至目标测试目录
		test-compile 编译测试源代码(和compile阶段的插件一样)
		process-test-classes
		test 使用合适的单元测试框架运行测试，这些测试代码不会被打包或部署
	Site Lifecycle
	①各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行
	②Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的
	③Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中的各个阶段：不论现在要执行生命周期中的哪一个阶段，都是从这个生命周期最初的位置开始执行
	④插件和目标
		[1]生命周期的各个阶段仅仅定义了要执行的任务是什么
		[2]各个阶段和插件的目标是对应的
		[3]相似的目标由特定的插件来完成
14、编辑器使用Maven
	为何不用编辑器内置插件的Maven
	答：内置插件的Maven不稳定
	Java工程和Web工程的区别：打包方式不同
	③基本操作
		[1]创建Maven版的Java工程
		[2]创建Maven版的Web工程
		[3]执行Maven命令
15、依赖[高级]
	①依赖的传递性
		[1]好处：可以传递的依赖不必在每个模块工程中都重复声明，在“最下面”的工程中依赖一次即可。
		[2]注意：非compile范围的依赖不能传递。所以在各个工程模块中，如果有需要就得重复声明依赖。
	②依赖的排除
	③依赖的原则
		[1]依赖的最短路径原则
		[2]依赖路径相同，按照导入顺序使用依赖
	④统一管理依赖的版本
		[2]建议配置方式
			i.使用properties标签内使用自定义标签统一声明版本号
			ii.在需要统一版本的位置，使用${自定义标签名}引用声明的版本号
		[3][]
		














摘    要…………………… ………………………………………………………………… I
ABSTRACT…………………………………………………………………………………… II
1 绪论 ……………………………………………………………………………………1
1.1 选题背景及意义…………………………………………………………………… …1
1.2 国内外研究现状…………………………………………………………………… …2
1.3研究内容和拟解决的问题……………………………………………………………2
1.4 本章小结 ………………………………………………………………………………3
2 开发工具及相关技术………………………………………………………………………4
2.1开发环境………………………………………………………………………………4
2.2开发工具…………………………………………………………………………………4
2.3JavaScript……………………………………………………………………………5
2.4CSS简介…………………………………………………………………………6
2.5JQuery…………………………………………………………………………6
2.6本章小结………………………………………………………………………………6
3 系统需求分析 …………………………………………………………………………8
3.1 用户需求 ………………………………………………………………………………8
3.2 功能需求………………………………………………………………………………8
3.3可行性分析……………………………………………………………………8
3.3.1 技术上可行性……………………………………………………………………8
3.3.2 经济上可行性……………………………………………………………………9
4 系统设计……………………………………………………………………………10
4.1 系统总体架构…………………………………………………………………………10
4.2前后台设计…………………………………………………………………11
4.3 数据库设计………………………………………………………………………11
4.3.1 数据库E-R图……………………………………………………………………11
4.3.2 数据表设计展示…………………………………………………………………12
4.4 本章小结…………………………………………………………………………13
5 系统实现………………………………………………………………………………14
5.1 注册登录功能实现……………………………………………………………………14
5.2 用户首页功能实现……………………………………………………………………14
5.3 用户消息接收页实现…………………………………………………………………15
5.4 系统管理员账号管理…………………………………………………………………15
5.5 总结……………………………………………………………………………………16
6 系统测试……………………………………………………………………………………17
6.1 测试环境………………………………………………………………………………17
6.2 测试原则和方法………………………………………………………………………17
6.3 测试结果………………………………………………………………………………17
6.4 本章小结………………………………………………………………………………18
7 总结……………………………………………………………………………………19
7.1 总结……………………………………………………………………………………19
7.2 展望……………………………………………………………………………………19
参考文献 ………………………………………………………………………………………20
致谢 ……………………………………………………………………………………………21
附录 ……………………………………………………………………………………………48